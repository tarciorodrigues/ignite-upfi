{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/Form/FormAddImage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\nexport function FormAddImage({\n  closeModal\n}) {\n  const {\n    0: imageUrl,\n    1: setImageUrl\n  } = useState('');\n  const {\n    0: localImageUrl,\n    1: setLocalImageUrl\n  } = useState('');\n  const toast = useToast();\n  const formValidations = {\n    image: {\n      // TODO REQUIRED, LESS THAN 10 MB AND ACCEPTED FORMATS VALIDATIONS\n      required: 'Arquivo obrigatório',\n      validate: {\n        lessThan10MB: v => v.size <= 10000000 || 'O arquivo deve ser menor que 10MB.',\n        acceptedFormats: v => /images\\/+(jpeg|png|gif)/gm.test(v.type) || 'Somente são aceitos arquivos PNG, JPEG e GIF'\n      }\n    },\n    title: {\n      // TODO REQUIRED, MIN AND MAX LENGTH VALIDATIONS\n      required: 'Título obrigatório',\n      minLength: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres'\n      },\n      maxLength: {\n        value: 20,\n        message: 'Máximo de 20 caracteres'\n      }\n    },\n    description: {\n      // TODO REQUIRED, MAX LENGTH VALIDATIONS\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres'\n      }\n    }\n  };\n  const queryClient = useQueryClient();\n  const mutation = useMutation(newImage => api.post('api/images', newImage), {\n    onSuccess: () => queryClient.invalidateQueries('images')\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState,\n    setError,\n    trigger\n  } = useForm();\n  const {\n    errors\n  } = formState;\n\n  const onSubmit = async data => {\n    try {\n      // TODO SHOW ERROR TOAST IF IMAGE URL DOES NOT EXISTS\n      if (!imageUrl) {\n        toast({\n          title: 'Imagem não adicionada',\n          description: 'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.',\n          isClosable: true,\n          duration: 3000,\n          status: 'warning'\n        });\n        return;\n      } // TODO EXECUTE ASYNC MUTATION\n\n\n      await mutation.mutateAsync(data); // TODO SHOW SUCCESS TOAST\n\n      toast({\n        title: 'Imagem cadastrada',\n        description: 'Sua imagem foi cadastrada com sucesso.',\n        isClosable: true,\n        duration: 3000,\n        status: 'success'\n      });\n    } catch {\n      // TODO SHOW ERROR TOAST IF SUBMIT FAILED\n      toast({\n        title: 'Falha no cadastro',\n        description: 'Ocorreu um erro ao tentar cadastrar a sua imagem.',\n        isClosable: true,\n        duration: 3000,\n        status: 'error'\n      });\n    } finally {\n      reset();\n      closeModal();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    as: \"form\",\n    width: \"100%\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(FileInput, _objectSpread(_objectSpread({\n        setImageUrl: setImageUrl,\n        localImageUrl: localImageUrl,\n        setLocalImageUrl: setLocalImageUrl,\n        setError: setError,\n        trigger: trigger\n      }, register('image', formValidations.image)), {}, {\n        error: errors.image\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"T\\xEDtulo da imagem...\"\n      }, register('title', formValidations.title)), {}, {\n        error: errors.title\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"Descri\\xE7\\xE3o da imagem...\"\n      }, register('description', formValidations.description)), {}, {\n        error: errors.description\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      my: 6,\n      isLoading: formState.isSubmitting,\n      isDisabled: formState.isSubmitting,\n      type: \"submit\",\n      w: \"100%\",\n      py: 6,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/Form/FormAddImage.tsx"],"names":["Box","Button","Stack","useToast","useForm","useState","useMutation","useQueryClient","api","FileInput","TextInput","FormAddImage","closeModal","imageUrl","setImageUrl","localImageUrl","setLocalImageUrl","toast","formValidations","image","required","validate","lessThan10MB","v","size","acceptedFormats","test","type","title","minLength","value","message","maxLength","description","queryClient","mutation","newImage","post","onSuccess","invalidateQueries","register","handleSubmit","reset","formState","setError","trigger","errors","onSubmit","data","isClosable","duration","status","mutateAsync","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\n\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\n\ninterface FormAddImageProps {\n  closeModal: () => void;\n}\n\nexport function FormAddImage({ closeModal }: FormAddImageProps): JSX.Element {\n  const [imageUrl, setImageUrl] = useState('');\n  const [localImageUrl, setLocalImageUrl] = useState('');\n  const toast = useToast();\n\n  const formValidations = {\n    image: {\n      // TODO REQUIRED, LESS THAN 10 MB AND ACCEPTED FORMATS VALIDATIONS\n      required: 'Arquivo obrigatório',\n      validate: {\n        lessThan10MB: v =>\n          v.size <= 10000000 || 'O arquivo deve ser menor que 10MB.',\n        acceptedFormats: v =>\n          /images\\/+(jpeg|png|gif)/gm.test(v.type) ||\n          'Somente são aceitos arquivos PNG, JPEG e GIF',\n      },\n    },\n    title: {\n      // TODO REQUIRED, MIN AND MAX LENGTH VALIDATIONS\n      required: 'Título obrigatório',\n      minLength: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres',\n      },\n      maxLength: {\n        value: 20,\n        message: 'Máximo de 20 caracteres',\n      },\n    },\n    description: {\n      // TODO REQUIRED, MAX LENGTH VALIDATIONS\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres',\n      },\n    },\n  };\n\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    (newImage: Record<string, unknown>) => api.post('api/images', newImage),\n    {\n      onSuccess: () => queryClient.invalidateQueries('images'),\n    }\n  );\n\n  const { register, handleSubmit, reset, formState, setError, trigger } =\n    useForm();\n  const { errors } = formState;\n\n  const onSubmit = async (data: Record<string, unknown>): Promise<void> => {\n    try {\n      // TODO SHOW ERROR TOAST IF IMAGE URL DOES NOT EXISTS\n      if (!imageUrl) {\n        toast({\n          title: 'Imagem não adicionada',\n          description:\n            'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.',\n          isClosable: true,\n          duration: 3000,\n          status: 'warning',\n        });\n        return;\n      }\n      // TODO EXECUTE ASYNC MUTATION\n      await mutation.mutateAsync(data);\n      // TODO SHOW SUCCESS TOAST\n      toast({\n        title: 'Imagem cadastrada',\n        description: 'Sua imagem foi cadastrada com sucesso.',\n        isClosable: true,\n        duration: 3000,\n        status: 'success',\n      });\n    } catch {\n      // TODO SHOW ERROR TOAST IF SUBMIT FAILED\n      toast({\n        title: 'Falha no cadastro',\n        description: 'Ocorreu um erro ao tentar cadastrar a sua imagem.',\n        isClosable: true,\n        duration: 3000,\n        status: 'error',\n      });\n    } finally {\n      reset();\n      closeModal();\n    }\n  };\n\n  return (\n    <Box as=\"form\" width=\"100%\" onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={4}>\n        <FileInput\n          setImageUrl={setImageUrl}\n          localImageUrl={localImageUrl}\n          setLocalImageUrl={setLocalImageUrl}\n          setError={setError}\n          trigger={trigger}\n          {...register('image', formValidations.image)}\n          error={errors.image}\n        />\n\n        <TextInput\n          placeholder=\"Título da imagem...\"\n          {...register('title', formValidations.title)}\n          error={errors.title}\n        />\n\n        <TextInput\n          placeholder=\"Descrição da imagem...\"\n          {...register('description', formValidations.description)}\n          error={errors.description}\n        />\n      </Stack>\n\n      <Button\n        my={6}\n        isLoading={formState.isSubmitting}\n        isDisabled={formState.isSubmitting}\n        type=\"submit\"\n        w=\"100%\"\n        py={6}\n      >\n        Enviar\n      </Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}