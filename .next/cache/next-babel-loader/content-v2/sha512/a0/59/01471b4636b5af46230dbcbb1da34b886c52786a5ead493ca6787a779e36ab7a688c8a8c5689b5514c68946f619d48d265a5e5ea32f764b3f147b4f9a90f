{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\nexport default function Home() {\n  _s();\n\n  var _useInfiniteQuery = useInfiniteQuery('images', /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var _ref$pageParam, pageParam, options, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref$pageParam = _ref.pageParam, pageParam = _ref$pageParam === void 0 ? null : _ref$pageParam;\n              options = pageParam !== null ? {\n                params: {\n                  after: pageParam\n                }\n              } : {};\n              _context.next = 4;\n              return api.get(\"/api/images\", options);\n\n            case 4:\n              response = _context.sent;\n              return _context.abrupt(\"return\", response.data);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), {\n    getNextPageParam: function getNextPageParam(lastPage, pages) {\n      return (// eslint-disable-next-line no-extra-boolean-cast\n        !!lastPage.after ? lastPage.after : null\n      );\n    }\n  } // TODO GET AND RETURN NEXT PAGE PARAM\n  ),\n      data = _useInfiniteQuery.data,\n      isLoading = _useInfiniteQuery.isLoading,\n      isError = _useInfiniteQuery.isError,\n      isFetchingNextPage = _useInfiniteQuery.isFetchingNextPage,\n      fetchNextPage = _useInfiniteQuery.fetchNextPage,\n      hasNextPage = _useInfiniteQuery.hasNextPage;\n\n  var formattedData = useMemo(function () {\n    return data === null || data === void 0 ? void 0 : data.pages.map(function (el) {\n      return el.data;\n    }).flat(1);\n  }, [data]); // TODO RENDER LOADING SCREEN\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  } // TODO RENDER ERROR SCREEN\n\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      maxW: 1120,\n      px: 20,\n      mx: \"auto\",\n      my: 20,\n      children: [/*#__PURE__*/_jsxDEV(CardList, {\n        cards: formattedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), hasNextPage && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: function onClick() {\n          return fetchNextPage();\n        },\n        children: isFetchingNextPage ? 'Carregando...' : 'Carregar mais'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Home, \"GuuWGVmqfHme7mRc/ergBOrsbkk=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/pages/index.tsx"],"names":["Button","Box","useMemo","useInfiniteQuery","Header","CardList","api","Loading","Error","Home","pageParam","options","params","after","get","response","data","getNextPageParam","lastPage","pages","isLoading","isError","isFetchingNextPage","fetchNextPage","hasNextPage","formattedData","map","el","flat"],"mappings":";;;;;;;;AAAA,SAASA,MAAT,EAAiBC,GAAjB,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAeA,eAAe,SAASC,IAAT,GAA6B;AAAA;;AAAA,0BAQtCN,gBAAgB,CAClB,QADkB;AAAA,yEAElB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oCAASO,SAAT,EAASA,SAAT,+BAAqB,IAArB;AACQC,cAAAA,OADR,GAEID,SAAS,KAAK,IAAd,GACI;AACEE,gBAAAA,MAAM,EAAE;AACNC,kBAAAA,KAAK,EAAEH;AADD;AADV,eADJ,GAMI,EARR;AAAA;AAAA,qBASyBJ,GAAG,CAACQ,GAAJ,gBAA6BH,OAA7B,CATzB;;AAAA;AASQI,cAAAA,QATR;AAAA,+CAUSA,QAAQ,CAACC,IAVlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFkB;;AAAA;AAAA;AAAA;AAAA,OAclB;AACEC,IAAAA,gBAAgB,EAAE,0BAACC,QAAD,EAAWC,KAAX;AAAA,aAChB;AACA,SAAC,CAACD,QAAQ,CAACL,KAAX,GAAmBK,QAAQ,CAACL,KAA5B,GAAoC;AAFpB;AAAA;AADpB,GAdkB,CAmBlB;AAnBkB,GARsB;AAAA,MAExCG,IAFwC,qBAExCA,IAFwC;AAAA,MAGxCI,SAHwC,qBAGxCA,SAHwC;AAAA,MAIxCC,OAJwC,qBAIxCA,OAJwC;AAAA,MAKxCC,kBALwC,qBAKxCA,kBALwC;AAAA,MAMxCC,aANwC,qBAMxCA,aANwC;AAAA,MAOxCC,WAPwC,qBAOxCA,WAPwC;;AA8B1C,MAAMC,aAAa,GAAGvB,OAAO,CAAC,YAAM;AAClC,WAAOc,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEG,KAAN,CAAYO,GAAZ,CAAgB,UAAAC,EAAE;AAAA,aAAIA,EAAE,CAACX,IAAP;AAAA,KAAlB,EAA+BY,IAA/B,CAAoC,CAApC,CAAP;AACD,GAF4B,EAE1B,CAACZ,IAAD,CAF0B,CAA7B,CA9B0C,CAkC1C;;AACA,MAAII,SAAJ,EAAe;AACb,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GArCyC,CAuC1C;;;AACA,MAAIC,OAAJ,EAAa;AACX,wBAAO,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,GAAD;AAAK,MAAA,IAAI,EAAE,IAAX;AAAiB,MAAA,EAAE,EAAE,EAArB;AAAyB,MAAA,EAAE,EAAC,MAA5B;AAAmC,MAAA,EAAE,EAAE,EAAvC;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEI;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,EAEGD,WAAW,iBACV,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAMD,aAAa,EAAnB;AAAA,SAAjB;AAAA,kBACGD,kBAAkB,GAAG,eAAH,GAAqB;AAD1C;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAcD;;GA1DuBb,I;UAQlBN,gB;;;KARkBM,I","sourcesContent":["import { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\n\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\n\ntype DataPage = {\n  title: string;\n  description: string;\n  url: string;\n  ts: number;\n  id: string;\n};\n\ntype Page = {\n  data: DataPage[];\n  after: string;\n};\n\nexport default function Home(): JSX.Element {\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery(\n    'images',\n    async ({ pageParam = null }) => {\n      const options =\n        pageParam !== null\n          ? {\n              params: {\n                after: pageParam,\n              },\n            }\n          : {};\n      const response = await api.get<Page>(`/api/images`, options);\n      return response.data;\n    },\n    {\n      getNextPageParam: (lastPage, pages) =>\n        // eslint-disable-next-line no-extra-boolean-cast\n        !!lastPage.after ? lastPage.after : null,\n    }\n    // TODO GET AND RETURN NEXT PAGE PARAM\n  );\n\n  const formattedData = useMemo(() => {\n    return data?.pages.map(el => el.data).flat(1);\n  }, [data]);\n\n  // TODO RENDER LOADING SCREEN\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  // TODO RENDER ERROR SCREEN\n  if (isError) {\n    return <Error />;\n  }\n\n  return (\n    <>\n      <Header />\n\n      <Box maxW={1120} px={20} mx=\"auto\" my={20}>\n        <CardList cards={formattedData} />\n        {hasNextPage && (\n          <Button onClick={() => fetchNextPage()}>\n            {isFetchingNextPage ? 'Carregando...' : 'Carregar mais'}\n          </Button>\n        )}\n      </Box>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}