{"ast":null,"code":"import _defineProperty from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/Input/TextInput.tsx\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { forwardRef } from 'react';\nimport { FormControl, FormErrorMessage, Icon, Input as ChakraInput, Tooltip } from '@chakra-ui/react';\nimport { FiAlertCircle } from 'react-icons/fi';\n\nvar TextInputBase = function TextInputBase(_ref, ref) {\n  var name = _ref.name,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? null : _ref$error,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"error\"]);\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    isInvalid: !!error,\n    children: [/*#__PURE__*/_jsxDEV(ChakraInput, _objectSpread({\n      \"aria-label\": name,\n      name: name,\n      ref: ref,\n      borderColor: \"transparent\",\n      bgColor: \"pGray.800\",\n      color: \"pGray.50\",\n      _placeholder: {\n        color: 'pGray.200'\n      },\n      _hover: {\n        borderColor: 'orange.400'\n      },\n      py: 6,\n      pr: 8\n    }, rest), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, _this), !!error && /*#__PURE__*/_jsxDEV(Tooltip, {\n      label: error.message,\n      bg: \"red.500\",\n      children: /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n        ml: -6,\n        mt: 0,\n        zIndex: \"tooltip\",\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          as: FiAlertCircle,\n          color: \"red.500\",\n          w: 4,\n          h: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = TextInputBase;\nexport var TextInput = /*#__PURE__*/forwardRef(TextInputBase);\n_c2 = TextInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInputBase\");\n$RefreshReg$(_c2, \"TextInput\");","map":{"version":3,"sources":["/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/Input/TextInput.tsx"],"names":["forwardRef","FormControl","FormErrorMessage","Icon","Input","ChakraInput","Tooltip","FiAlertCircle","TextInputBase","ref","name","error","rest","color","borderColor","message","TextInput"],"mappings":";;;;;;;;;;;AAAA,SAASA,UAAT,QAAqD,OAArD;AAEA,SACEC,WADF,EAEEC,gBAFF,EAGEC,IAHF,EAIEC,KAAK,IAAIC,WAJX,EAMEC,OANF,QAOO,kBAPP;AAQA,SAASC,aAAT,QAA8B,gBAA9B;;AAOA,IAAMC,aAAqE,GAAG,SAAxEA,aAAwE,OAE5EC,GAF4E,EAGzE;AAAA,MAFDC,IAEC,QAFDA,IAEC;AAAA,wBAFKC,KAEL;AAAA,MAFKA,KAEL,2BAFa,IAEb;AAAA,MAFsBC,IAEtB;;AACH,sBACE,QAAC,WAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,aAAa,EAAC,KAFhB;AAGE,IAAA,UAAU,EAAC,QAHb;AAIE,IAAA,SAAS,EAAE,CAAC,CAACD,KAJf;AAAA,4BAME,QAAC,WAAD;AACE,oBAAYD,IADd;AAEE,MAAA,IAAI,EAAEA,IAFR;AAGE,MAAA,GAAG,EAAED,GAHP;AAIE,MAAA,WAAW,EAAC,aAJd;AAKE,MAAA,OAAO,EAAC,WALV;AAME,MAAA,KAAK,EAAC,UANR;AAOE,MAAA,YAAY,EAAE;AACZI,QAAAA,KAAK,EAAE;AADK,OAPhB;AAUE,MAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP,OAVV;AAaE,MAAA,EAAE,EAAE,CAbN;AAcE,MAAA,EAAE,EAAE;AAdN,OAeMF,IAfN;AAAA;AAAA;AAAA;AAAA,aANF,EAwBG,CAAC,CAACD,KAAF,iBACC,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEA,KAAK,CAACI,OAAtB;AAA+B,MAAA,EAAE,EAAC,SAAlC;AAAA,6BACE,QAAC,gBAAD;AAAkB,QAAA,EAAE,EAAE,CAAC,CAAvB;AAA0B,QAAA,EAAE,EAAE,CAA9B;AAAiC,QAAA,MAAM,EAAC,SAAxC;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAER,aAAV;AAAyB,UAAA,KAAK,EAAC,SAA/B;AAAyC,UAAA,CAAC,EAAE,CAA5C;AAA+C,UAAA,CAAC,EAAE;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAkCD,CAtCD;;KAAMC,a;AAwCN,OAAO,IAAMQ,SAAS,gBAAGhB,UAAU,CAACQ,aAAD,CAA5B;MAAMQ,S","sourcesContent":["import { forwardRef, ForwardRefRenderFunction } from 'react';\nimport { FieldError } from 'react-hook-form';\nimport {\n  FormControl,\n  FormErrorMessage,\n  Icon,\n  Input as ChakraInput,\n  InputProps as ChakraInputProps,\n  Tooltip,\n} from '@chakra-ui/react';\nimport { FiAlertCircle } from 'react-icons/fi';\n\ninterface InputProps extends ChakraInputProps {\n  name: string;\n  error?: FieldError;\n}\n\nconst TextInputBase: ForwardRefRenderFunction<HTMLInputElement, InputProps> = (\n  { name, error = null, ...rest },\n  ref\n) => {\n  return (\n    <FormControl\n      display=\"flex\"\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      isInvalid={!!error}\n    >\n      <ChakraInput\n        aria-label={name}\n        name={name}\n        ref={ref}\n        borderColor=\"transparent\"\n        bgColor=\"pGray.800\"\n        color=\"pGray.50\"\n        _placeholder={{\n          color: 'pGray.200',\n        }}\n        _hover={{\n          borderColor: 'orange.400',\n        }}\n        py={6}\n        pr={8}\n        {...rest}\n      />\n\n      {!!error && (\n        <Tooltip label={error.message} bg=\"red.500\">\n          <FormErrorMessage ml={-6} mt={0} zIndex=\"tooltip\">\n            <Icon as={FiAlertCircle} color=\"red.500\" w={4} h={4} />\n          </FormErrorMessage>\n        </Tooltip>\n      )}\n    </FormControl>\n  );\n};\n\nexport const TextInput = forwardRef(TextInputBase);\n"]},"metadata":{},"sourceType":"module"}