{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\nexport default function Home() {\n  _s();\n\n  function fetchImages(_x) {\n    return _fetchImages.apply(this, arguments);\n  }\n\n  function _fetchImages() {\n    _fetchImages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var _ref$pageParam, pageParam, _yield$api, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref$pageParam = _ref.pageParam, pageParam = _ref$pageParam === void 0 ? null : _ref$pageParam;\n              _context.next = 3;\n              return api('/api/images', {\n                params: {\n                  after: pageParam\n                }\n              });\n\n            case 3:\n              _yield$api = _context.sent;\n              data = _yield$api.data;\n              return _context.abrupt(\"return\", data);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _fetchImages.apply(this, arguments);\n  }\n\n  var _useInfiniteQuery = useInfiniteQuery('images', fetchImages, {\n    getNextPageParam: function getNextPageParam(lastPage) {\n      return (lastPage === null || lastPage === void 0 ? void 0 : lastPage.after) || null;\n    }\n  }),\n      data = _useInfiniteQuery.data,\n      isLoading = _useInfiniteQuery.isLoading,\n      isError = _useInfiniteQuery.isError,\n      isFetchingNextPage = _useInfiniteQuery.isFetchingNextPage,\n      fetchNextPage = _useInfiniteQuery.fetchNextPage,\n      hasNextPage = _useInfiniteQuery.hasNextPage;\n\n  var formattedData = useMemo(function () {\n    var formatted = data === null || data === void 0 ? void 0 : data.pages.flatMap(function (imageData) {\n      return imageData.data.flat();\n    });\n    return formatted;\n  }, [data]);\n\n  if (isLoading && !isError) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!isLoading && isError) {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      maxW: 1120,\n      px: [10, 15, 20],\n      mx: \"auto\",\n      my: [10, 15, 20],\n      children: [/*#__PURE__*/_jsxDEV(CardList, {\n        cards: formattedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), hasNextPage && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: function onClick() {\n          return fetchNextPage();\n        },\n        disabled: isFetchingNextPage,\n        children: isFetchingNextPage ? 'Carregando...' : 'Carregar mais'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Home, \"GuuWGVmqfHme7mRc/ergBOrsbkk=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/pages/index.tsx"],"names":["Button","Box","useMemo","useInfiniteQuery","Header","CardList","api","Loading","Error","Home","fetchImages","pageParam","params","after","data","getNextPageParam","lastPage","isLoading","isError","isFetchingNextPage","fetchNextPage","hasNextPage","formattedData","formatted","pages","flatMap","imageData","flat"],"mappings":"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","sourcesContent":["import { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\n\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\n\ninterface Image {\n  title: string;\n  description: string;\n  url: string;\n  ts: number;\n  id: string;\n}\n\ninterface GetImagesResponse {\n  after: string;\n  data: Image[];\n}\n\nexport default function Home(): JSX.Element {\n  async function fetchImages({ pageParam = null }): Promise<GetImagesResponse> {\n    const { data } = await api('/api/images', {\n      params: {\n        after: pageParam,\n      },\n    });\n    return data;\n  }\n\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery('images', fetchImages, {\n    getNextPageParam: lastPage => lastPage?.after || null,\n  });\n\n  const formattedData = useMemo(() => {\n    const formatted = data?.pages.flatMap(imageData => {\n      return imageData.data.flat();\n    });\n    return formatted;\n  }, [data]);\n\n  if (isLoading && !isError) {\n    return <Loading />;\n  }\n\n  if (!isLoading && isError) {\n    return <Error />;\n  }\n\n  return (\n    <>\n      <Header />\n\n      <Box maxW={1120} px={[10, 15, 20]} mx=\"auto\" my={[10, 15, 20]}>\n        <CardList cards={formattedData} />\n\n        {hasNextPage && (\n          <Button onClick={() => fetchNextPage()} disabled={isFetchingNextPage}>\n            {isFetchingNextPage ? 'Carregando...' : 'Carregar mais'}\n          </Button>\n        )}\n      </Box>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}