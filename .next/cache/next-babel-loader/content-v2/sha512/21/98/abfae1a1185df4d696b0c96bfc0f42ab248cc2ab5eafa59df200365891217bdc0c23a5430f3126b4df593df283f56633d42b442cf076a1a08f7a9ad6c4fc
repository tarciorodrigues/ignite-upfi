{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/Form/FormAddImage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\nexport function FormAddImage({\n  closeModal\n}) {\n  const {\n    0: imageUrl,\n    1: setImageUrl\n  } = useState('');\n  const {\n    0: localImageUrl,\n    1: setLocalImageUrl\n  } = useState('');\n  const toast = useToast();\n  const acceptedFormatsRegex = /(?:([^:/?#]+):)?(?:([^/?#]*))?([^?#](?:jpeg|gif|png))(?:\\?([^#]*))?(?:#(.*))?/g;\n  const formValidations = {\n    image: {\n      required: 'Arquivo obrigatório',\n      validate: {\n        lessThan10MB: fileList => fileList[0].size < 10000000 || 'O arquivo deve ser menor que 10MB',\n        acceptedFormats: fileList => acceptedFormatsRegex.test(fileList[0].type) || 'Somente são aceitos arquivos PNG, JPEG e GIF'\n      }\n    },\n    title: {\n      required: 'Título obrigatório',\n      minLength: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres'\n      },\n      maxLength: {\n        value: 20,\n        message: 'Máximo de 20 caracteres'\n      }\n    },\n    description: {\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres'\n      }\n    }\n  };\n  const queryClient = useQueryClient();\n  const mutation = useMutation(async image => {\n    await api.post('/api/images', _objectSpread(_objectSpread({}, image), {}, {\n      url: imageUrl\n    }));\n  }, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('images');\n    }\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState,\n    setError,\n    trigger\n  } = useForm();\n  const {\n    errors\n  } = formState;\n\n  const onSubmit = async data => {\n    try {\n      if (!imageUrl) {\n        toast({\n          status: 'error',\n          title: 'Imagem não adicionada',\n          description: 'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.'\n        });\n        return;\n      }\n\n      await mutation.mutateAsync(data);\n      toast({\n        title: 'Imagem cadastrada',\n        description: 'Sua imagem foi cadastrada com sucesso.',\n        status: 'success'\n      });\n    } catch {\n      toast({\n        title: 'Falha no cadastro',\n        description: 'Ocorreu um erro ao tentar cadastrar a sua imagem.',\n        status: 'error'\n      });\n    } finally {\n      reset();\n      setImageUrl('');\n      setLocalImageUrl('');\n      closeModal();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    as: \"form\",\n    width: \"100%\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(FileInput, _objectSpread(_objectSpread({\n        setImageUrl: setImageUrl,\n        localImageUrl: localImageUrl,\n        setLocalImageUrl: setLocalImageUrl,\n        setError: setError,\n        trigger: trigger\n      }, register('image', formValidations.image)), {}, {\n        error: errors.image\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"T\\xEDtulo da imagem...\"\n      }, register('title', formValidations.title)), {}, {\n        error: errors.title\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"Descri\\xE7\\xE3o da imagem...\"\n      }, register('description', formValidations.description)), {}, {\n        error: errors.description\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      my: 6,\n      isLoading: formState.isSubmitting,\n      isDisabled: formState.isSubmitting,\n      type: \"submit\",\n      w: \"100%\",\n      py: 6,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/Form/FormAddImage.tsx"],"names":["Box","Button","Stack","useToast","useForm","useState","useMutation","useQueryClient","api","FileInput","TextInput","FormAddImage","closeModal","imageUrl","setImageUrl","localImageUrl","setLocalImageUrl","toast","acceptedFormatsRegex","formValidations","image","required","validate","lessThan10MB","fileList","size","acceptedFormats","test","type","title","minLength","value","message","maxLength","description","queryClient","mutation","post","url","onSuccess","invalidateQueries","register","handleSubmit","reset","formState","setError","trigger","errors","onSubmit","data","status","mutateAsync","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\n\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\n\ninterface FormAddImageProps {\n  closeModal: () => void;\n}\n\ninterface NewImageData {\n  url: string;\n  title: string;\n  description: string;\n}\n\nexport function FormAddImage({ closeModal }: FormAddImageProps): JSX.Element {\n  const [imageUrl, setImageUrl] = useState('');\n  const [localImageUrl, setLocalImageUrl] = useState('');\n  const toast = useToast();\n\n  const acceptedFormatsRegex =\n    /(?:([^:/?#]+):)?(?:([^/?#]*))?([^?#](?:jpeg|gif|png))(?:\\?([^#]*))?(?:#(.*))?/g;\n\n  const formValidations = {\n    image: {\n      required: 'Arquivo obrigatório',\n      validate: {\n        lessThan10MB: fileList =>\n          fileList[0].size < 10000000 || 'O arquivo deve ser menor que 10MB',\n        acceptedFormats: fileList =>\n          acceptedFormatsRegex.test(fileList[0].type) ||\n          'Somente são aceitos arquivos PNG, JPEG e GIF',\n      },\n    },\n    title: {\n      required: 'Título obrigatório',\n      minLength: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres',\n      },\n      maxLength: {\n        value: 20,\n        message: 'Máximo de 20 caracteres',\n      },\n    },\n    description: {\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres',\n      },\n    },\n  };\n\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    async (image: NewImageData) => {\n      await api.post('/api/images', {\n        ...image,\n        url: imageUrl,\n      });\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('images');\n      },\n    }\n  );\n\n  const { register, handleSubmit, reset, formState, setError, trigger } =\n    useForm();\n  const { errors } = formState;\n\n  const onSubmit = async (data: NewImageData): Promise<void> => {\n    try {\n      if (!imageUrl) {\n        toast({\n          status: 'error',\n          title: 'Imagem não adicionada',\n          description:\n            'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.',\n        });\n        return;\n      }\n      await mutation.mutateAsync(data);\n      toast({\n        title: 'Imagem cadastrada',\n        description: 'Sua imagem foi cadastrada com sucesso.',\n        status: 'success',\n      });\n    } catch {\n      toast({\n        title: 'Falha no cadastro',\n        description: 'Ocorreu um erro ao tentar cadastrar a sua imagem.',\n        status: 'error',\n      });\n    } finally {\n      reset();\n      setImageUrl('');\n      setLocalImageUrl('');\n      closeModal();\n    }\n  };\n\n  return (\n    <Box as=\"form\" width=\"100%\" onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={4}>\n        <FileInput\n          setImageUrl={setImageUrl}\n          localImageUrl={localImageUrl}\n          setLocalImageUrl={setLocalImageUrl}\n          setError={setError}\n          trigger={trigger}\n          {...register('image', formValidations.image)}\n          error={errors.image}\n        />\n\n        <TextInput\n          placeholder=\"Título da imagem...\"\n          {...register('title', formValidations.title)}\n          error={errors.title}\n        />\n\n        <TextInput\n          placeholder=\"Descrição da imagem...\"\n          {...register('description', formValidations.description)}\n          error={errors.description}\n        />\n      </Stack>\n\n      <Button\n        my={6}\n        isLoading={formState.isSubmitting}\n        isDisabled={formState.isSubmitting}\n        type=\"submit\"\n        w=\"100%\"\n        py={6}\n      >\n        Enviar\n      </Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}