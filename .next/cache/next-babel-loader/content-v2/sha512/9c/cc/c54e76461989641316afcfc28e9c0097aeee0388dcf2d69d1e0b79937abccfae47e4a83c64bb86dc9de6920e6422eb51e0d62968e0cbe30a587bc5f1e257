{"ast":null,"code":"import _defineProperty from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/Form/FormAddImage.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\nexport function FormAddImage(_ref) {\n  _s();\n\n  var closeModal = _ref.closeModal;\n\n  var _useState = useState(''),\n      imageUrl = _useState[0],\n      setImageUrl = _useState[1];\n\n  var _useState2 = useState(''),\n      localImageUrl = _useState2[0],\n      setLocalImageUrl = _useState2[1];\n\n  var toast = useToast();\n  var formValidations = {\n    image: {\n      // TODO REQUIRED, LESS THAN 10 MB AND ACCEPTED FORMATS VALIDATIONS\n      required: 'Arquivo obrigatório',\n      validate: {\n        lessThan10MB: function lessThan10MB(v) {\n          return v.size <= 10000000 || 'O arquivo deve ser menor que 10MB.';\n        },\n        acceptedFormats: function acceptedFormats(v) {\n          return /images\\/+(jpeg|png|gif)/gm.test(v.type) || 'Somente são aceitos arquivos PNG, JPEG e GIF';\n        }\n      }\n    },\n    title: {\n      // TODO REQUIRED, MIN AND MAX LENGTH VALIDATIONS\n      required: 'Título obrigatório',\n      minLength: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres'\n      },\n      maxLength: {\n        value: 20,\n        message: 'Máximo de 20 caracteres'\n      }\n    },\n    description: {\n      // TODO REQUIRED, MAX LENGTH VALIDATIONS\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres'\n      }\n    }\n  };\n  var queryClient = useQueryClient();\n  var mutation = useMutation(function (newImage) {\n    return api.post('api/images', newImage);\n  }, {\n    onSuccess: function onSuccess() {\n      return queryClient.invalidateQueries('images');\n    }\n  });\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset,\n      formState = _useForm.formState,\n      setError = _useForm.setError,\n      trigger = _useForm.trigger;\n\n  var errors = formState.errors;\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (imageUrl) {\n                _context.next = 4;\n                break;\n              }\n\n              toast({\n                title: 'Imagem não adicionada',\n                description: 'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.',\n                isClosable: true,\n                duration: 3000,\n                status: 'warning'\n              });\n              return _context.abrupt(\"return\");\n\n            case 4:\n              _context.next = 6;\n              return mutation.mutateAsync(data);\n\n            case 6:\n              // TODO SHOW SUCCESS TOAST\n              toast({\n                title: 'Imagem cadastrada',\n                description: 'Sua imagem foi cadastrada com sucesso.',\n                isClosable: true,\n                duration: 3000,\n                status: 'success'\n              });\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              // TODO SHOW ERROR TOAST IF SUBMIT FAILED\n              toast({\n                title: 'Falha no cadastro',\n                description: 'Ocorreu um erro ao tentar cadastrar a sua imagem.',\n                isClosable: true,\n                duration: 3000,\n                status: 'error'\n              });\n\n            case 12:\n              _context.prev = 12;\n              reset();\n              closeModal();\n              return _context.finish(12);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9, 12, 16]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    as: \"form\",\n    width: \"100%\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(FileInput, _objectSpread(_objectSpread({\n        setImageUrl: setImageUrl,\n        localImageUrl: localImageUrl,\n        setLocalImageUrl: setLocalImageUrl,\n        setError: setError,\n        trigger: trigger\n      }, register('image', formValidations.image)), {}, {\n        error: errors.image\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"T\\xEDtulo da imagem...\"\n      }, register('title', formValidations.title)), {}, {\n        error: errors.title\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"Descri\\xE7\\xE3o da imagem...\"\n      }, register('description', formValidations.description)), {}, {\n        error: errors.description\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      my: 6,\n      isLoading: formState.isSubmitting,\n      isDisabled: formState.isSubmitting,\n      type: \"submit\",\n      w: \"100%\",\n      py: 6,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormAddImage, \"Q1o0UW6nOtofl1xJIyXCN0KMSgY=\", false, function () {\n  return [useToast, useQueryClient, useMutation, useForm];\n});\n\n_c = FormAddImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAddImage\");","map":{"version":3,"sources":["/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/Form/FormAddImage.tsx"],"names":["Box","Button","Stack","useToast","useForm","useState","useMutation","useQueryClient","api","FileInput","TextInput","FormAddImage","closeModal","imageUrl","setImageUrl","localImageUrl","setLocalImageUrl","toast","formValidations","image","required","validate","lessThan10MB","v","size","acceptedFormats","test","type","title","minLength","value","message","maxLength","description","queryClient","mutation","newImage","post","onSuccess","invalidateQueries","register","handleSubmit","reset","formState","setError","trigger","errors","onSubmit","data","isClosable","duration","status","mutateAsync","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\n\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\n\ninterface FormAddImageProps {\n  closeModal: () => void;\n}\n\nexport function FormAddImage({ closeModal }: FormAddImageProps): JSX.Element {\n  const [imageUrl, setImageUrl] = useState('');\n  const [localImageUrl, setLocalImageUrl] = useState('');\n  const toast = useToast();\n\n  const formValidations = {\n    image: {\n      // TODO REQUIRED, LESS THAN 10 MB AND ACCEPTED FORMATS VALIDATIONS\n      required: 'Arquivo obrigatório',\n      validate: {\n        lessThan10MB: v =>\n          v.size <= 10000000 || 'O arquivo deve ser menor que 10MB.',\n        acceptedFormats: v =>\n          /images\\/+(jpeg|png|gif)/gm.test(v.type) ||\n          'Somente são aceitos arquivos PNG, JPEG e GIF',\n      },\n    },\n    title: {\n      // TODO REQUIRED, MIN AND MAX LENGTH VALIDATIONS\n      required: 'Título obrigatório',\n      minLength: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres',\n      },\n      maxLength: {\n        value: 20,\n        message: 'Máximo de 20 caracteres',\n      },\n    },\n    description: {\n      // TODO REQUIRED, MAX LENGTH VALIDATIONS\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres',\n      },\n    },\n  };\n\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    (newImage: Record<string, unknown>) => api.post('api/images', newImage),\n    {\n      onSuccess: () => queryClient.invalidateQueries('images'),\n    }\n  );\n\n  const { register, handleSubmit, reset, formState, setError, trigger } =\n    useForm();\n  const { errors } = formState;\n\n  const onSubmit = async (data: Record<string, unknown>): Promise<void> => {\n    try {\n      // TODO SHOW ERROR TOAST IF IMAGE URL DOES NOT EXISTS\n      if (!imageUrl) {\n        toast({\n          title: 'Imagem não adicionada',\n          description:\n            'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.',\n          isClosable: true,\n          duration: 3000,\n          status: 'warning',\n        });\n        return;\n      }\n      // TODO EXECUTE ASYNC MUTATION\n      await mutation.mutateAsync(data);\n      // TODO SHOW SUCCESS TOAST\n      toast({\n        title: 'Imagem cadastrada',\n        description: 'Sua imagem foi cadastrada com sucesso.',\n        isClosable: true,\n        duration: 3000,\n        status: 'success',\n      });\n    } catch {\n      // TODO SHOW ERROR TOAST IF SUBMIT FAILED\n      toast({\n        title: 'Falha no cadastro',\n        description: 'Ocorreu um erro ao tentar cadastrar a sua imagem.',\n        isClosable: true,\n        duration: 3000,\n        status: 'error',\n      });\n    } finally {\n      reset();\n      closeModal();\n    }\n  };\n\n  return (\n    <Box as=\"form\" width=\"100%\" onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={4}>\n        <FileInput\n          setImageUrl={setImageUrl}\n          localImageUrl={localImageUrl}\n          setLocalImageUrl={setLocalImageUrl}\n          setError={setError}\n          trigger={trigger}\n          {...register('image', formValidations.image)}\n          error={errors.image}\n        />\n\n        <TextInput\n          placeholder=\"Título da imagem...\"\n          {...register('title', formValidations.title)}\n          error={errors.title}\n        />\n\n        <TextInput\n          placeholder=\"Descrição da imagem...\"\n          {...register('description', formValidations.description)}\n          error={errors.description}\n        />\n      </Stack>\n\n      <Button\n        my={6}\n        isLoading={formState.isSubmitting}\n        isDisabled={formState.isSubmitting}\n        type=\"submit\"\n        w=\"100%\"\n        py={6}\n      >\n        Enviar\n      </Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}