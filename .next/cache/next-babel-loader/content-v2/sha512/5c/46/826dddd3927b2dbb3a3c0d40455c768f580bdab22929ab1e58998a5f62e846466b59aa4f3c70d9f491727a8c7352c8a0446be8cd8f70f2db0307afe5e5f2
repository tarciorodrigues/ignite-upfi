{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/Form/FormAddImage.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\nexport function FormAddImage(_ref) {\n  _s();\n\n  var closeModal = _ref.closeModal;\n\n  var _useState = useState(''),\n      imageUrl = _useState[0],\n      setImageUrl = _useState[1];\n\n  var _useState2 = useState(''),\n      localImageUrl = _useState2[0],\n      setLocalImageUrl = _useState2[1];\n\n  var toast = useToast();\n  var acceptedFormatsRegex = /(?:([^:/?#]+):)?(?:([^/?#]*))?([^?#](?:jpeg|gif|png))(?:\\?([^#]*))?(?:#(.*))?/g;\n  var formValidations = {\n    image: {\n      required: 'Arquivo obrigatório',\n      validate: {\n        lessThan10MB: function lessThan10MB(fileList) {\n          return fileList[0].size < 10000000 || 'O arquivo deve ser menor que 10MB';\n        },\n        acceptedFormats: function acceptedFormats(fileList) {\n          return acceptedFormatsRegex.test(fileList[0].type) || 'Somente são aceitos arquivos PNG, JPEG e GIF';\n        }\n      }\n    },\n    title: {\n      required: 'Título obrigatório',\n      minLength: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres'\n      },\n      maxLength: {\n        value: 20,\n        message: 'Máximo de 20 caracteres'\n      }\n    },\n    description: {\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres'\n      }\n    }\n  };\n  var queryClient = useQueryClient();\n  var mutation = useMutation( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return api.post('/api/images', _objectSpread(_objectSpread({}, image), {}, {\n                url: imageUrl\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), {\n    onSuccess: function onSuccess() {\n      queryClient.invalidateQueries('images');\n    }\n  });\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset,\n      formState = _useForm.formState,\n      setError = _useForm.setError,\n      trigger = _useForm.trigger;\n\n  var errors = formState.errors;\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              if (imageUrl) {\n                _context2.next = 4;\n                break;\n              }\n\n              toast({\n                status: 'error',\n                title: 'Imagem não adicionada',\n                description: 'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.'\n              });\n              return _context2.abrupt(\"return\");\n\n            case 4:\n              _context2.next = 6;\n              return mutation.mutateAsync(data);\n\n            case 6:\n              toast({\n                title: 'Imagem cadastrada',\n                description: 'Sua imagem foi cadastrada com sucesso.',\n                status: 'success'\n              });\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              toast({\n                title: 'Falha no cadastro',\n                description: 'Ocorreu um erro ao tentar cadastrar a sua imagem.',\n                status: 'error'\n              });\n\n            case 12:\n              _context2.prev = 12;\n              reset();\n              setImageUrl('');\n              setLocalImageUrl('');\n              closeModal();\n              return _context2.finish(12);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 9, 12, 18]]);\n    }));\n\n    return function onSubmit(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    as: \"form\",\n    width: \"100%\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(FileInput, _objectSpread(_objectSpread({\n        setImageUrl: setImageUrl,\n        localImageUrl: localImageUrl,\n        setLocalImageUrl: setLocalImageUrl,\n        setError: setError,\n        trigger: trigger\n      }, register('image', formValidations.image)), {}, {\n        error: errors.image\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"T\\xEDtulo da imagem...\"\n      }, register('title', formValidations.title)), {}, {\n        error: errors.title\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"Descri\\xE7\\xE3o da imagem...\"\n      }, register('description', formValidations.description)), {}, {\n        error: errors.description\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      my: 6,\n      isLoading: formState.isSubmitting,\n      isDisabled: formState.isSubmitting,\n      type: \"submit\",\n      w: \"100%\",\n      py: 6,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormAddImage, \"Q1o0UW6nOtofl1xJIyXCN0KMSgY=\", false, function () {\n  return [useToast, useQueryClient, useMutation, useForm];\n});\n\n_c = FormAddImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAddImage\");","map":{"version":3,"sources":["/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/Form/FormAddImage.tsx"],"names":["Box","Button","Stack","useToast","useForm","useState","useMutation","useQueryClient","api","FileInput","TextInput","FormAddImage","closeModal","imageUrl","setImageUrl","localImageUrl","setLocalImageUrl","toast","acceptedFormatsRegex","formValidations","image","required","validate","lessThan10MB","fileList","size","acceptedFormats","test","type","title","minLength","value","message","maxLength","description","queryClient","mutation","post","url","onSuccess","invalidateQueries","register","handleSubmit","reset","formState","setError","trigger","errors","onSubmit","data","status","mutateAsync","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\n\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\n\ninterface FormAddImageProps {\n  closeModal: () => void;\n}\n\ninterface NewImageData {\n  url: string;\n  title: string;\n  description: string;\n}\n\nexport function FormAddImage({ closeModal }: FormAddImageProps): JSX.Element {\n  const [imageUrl, setImageUrl] = useState('');\n  const [localImageUrl, setLocalImageUrl] = useState('');\n  const toast = useToast();\n\n  const acceptedFormatsRegex =\n    /(?:([^:/?#]+):)?(?:([^/?#]*))?([^?#](?:jpeg|gif|png))(?:\\?([^#]*))?(?:#(.*))?/g;\n\n  const formValidations = {\n    image: {\n      required: 'Arquivo obrigatório',\n      validate: {\n        lessThan10MB: fileList =>\n          fileList[0].size < 10000000 || 'O arquivo deve ser menor que 10MB',\n        acceptedFormats: fileList =>\n          acceptedFormatsRegex.test(fileList[0].type) ||\n          'Somente são aceitos arquivos PNG, JPEG e GIF',\n      },\n    },\n    title: {\n      required: 'Título obrigatório',\n      minLength: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres',\n      },\n      maxLength: {\n        value: 20,\n        message: 'Máximo de 20 caracteres',\n      },\n    },\n    description: {\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres',\n      },\n    },\n  };\n\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    async (image: NewImageData) => {\n      await api.post('/api/images', {\n        ...image,\n        url: imageUrl,\n      });\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('images');\n      },\n    }\n  );\n\n  const { register, handleSubmit, reset, formState, setError, trigger } =\n    useForm();\n  const { errors } = formState;\n\n  const onSubmit = async (data: NewImageData): Promise<void> => {\n    try {\n      if (!imageUrl) {\n        toast({\n          status: 'error',\n          title: 'Imagem não adicionada',\n          description:\n            'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.',\n        });\n        return;\n      }\n      await mutation.mutateAsync(data);\n      toast({\n        title: 'Imagem cadastrada',\n        description: 'Sua imagem foi cadastrada com sucesso.',\n        status: 'success',\n      });\n    } catch {\n      toast({\n        title: 'Falha no cadastro',\n        description: 'Ocorreu um erro ao tentar cadastrar a sua imagem.',\n        status: 'error',\n      });\n    } finally {\n      reset();\n      setImageUrl('');\n      setLocalImageUrl('');\n      closeModal();\n    }\n  };\n\n  return (\n    <Box as=\"form\" width=\"100%\" onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={4}>\n        <FileInput\n          setImageUrl={setImageUrl}\n          localImageUrl={localImageUrl}\n          setLocalImageUrl={setLocalImageUrl}\n          setError={setError}\n          trigger={trigger}\n          {...register('image', formValidations.image)}\n          error={errors.image}\n        />\n\n        <TextInput\n          placeholder=\"Título da imagem...\"\n          {...register('title', formValidations.title)}\n          error={errors.title}\n        />\n\n        <TextInput\n          placeholder=\"Descrição da imagem...\"\n          {...register('description', formValidations.description)}\n          error={errors.description}\n        />\n      </Stack>\n\n      <Button\n        my={6}\n        isLoading={formState.isSubmitting}\n        isDisabled={formState.isSubmitting}\n        type=\"submit\"\n        w=\"100%\"\n        py={6}\n      >\n        Enviar\n      </Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}