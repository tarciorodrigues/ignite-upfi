{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/CardList.tsx\",\n    _s = $RefreshSig$();\n\nimport { SimpleGrid, useDisclosure } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { Card } from './Card';\nimport { ModalViewImage } from './Modal/ViewImage';\nexport function CardList(_ref) {\n  _s();\n\n  var _this = this;\n\n  var cards = _ref.cards;\n\n  // TODO MODAL USEDISCLOSURE\n  var _useDisclosure = useDisclosure(),\n      isOpen = _useDisclosure.isOpen,\n      onClose = _useDisclosure.onClose,\n      onOpen = _useDisclosure.onOpen; // TODO SELECTED IMAGE URL STATE\n\n\n  var _useState = useState(''),\n      selectedImageUrl = _useState[0],\n      setSelectedImageUrl = _useState[1]; // TODO FUNCTION HANDLE VIEW IMAGE\n\n\n  var handleViewImage = function handleViewImage(url) {\n    setSelectedImageUrl(url);\n    onOpen();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 3,\n      spacing: 40,\n      children: cards.map(function (card) {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          data: card,\n          viewImage: handleViewImage\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(ModalViewImage, {\n      imgUrl: selectedImageUrl,\n      isOpen: isOpen,\n      onClose: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CardList, \"W4oWSMFAEa4V5OoVHkEYzOS92rU=\", false, function () {\n  return [useDisclosure];\n});\n\n_c = CardList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardList\");","map":{"version":3,"sources":["/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/components/CardList.tsx"],"names":["SimpleGrid","useDisclosure","useState","Card","ModalViewImage","CardList","cards","isOpen","onClose","onOpen","selectedImageUrl","setSelectedImageUrl","handleViewImage","url","map","card","id"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,aAArB,QAA0C,kBAA1C;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAcA,OAAO,SAASC,QAAT,OAAsD;AAAA;;AAAA;;AAAA,MAAlCC,KAAkC,QAAlCA,KAAkC;;AAC3D;AAD2D,uBAEvBL,aAAa,EAFU;AAAA,MAEnDM,MAFmD,kBAEnDA,MAFmD;AAAA,MAE3CC,OAF2C,kBAE3CA,OAF2C;AAAA,MAElCC,MAFkC,kBAElCA,MAFkC,EAI3D;;;AAJ2D,kBAKXP,QAAQ,CAAC,EAAD,CALG;AAAA,MAKpDQ,gBALoD;AAAA,MAKlCC,mBALkC,iBAO3D;;;AACA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAuB;AAC7CF,IAAAA,mBAAmB,CAACE,GAAD,CAAnB;AACAJ,IAAAA,MAAM;AACP,GAHD;;AAKA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAE,CAArB;AAAwB,MAAA,OAAO,EAAE,EAAjC;AAAA,gBACGH,KAAK,CAACQ,GAAN,CAAU,UAAAC,IAAI;AAAA,4BACb,QAAC,IAAD;AAAoB,UAAA,IAAI,EAAEA,IAA1B;AAAgC,UAAA,SAAS,EAAEH;AAA3C,WAAWG,IAAI,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA,iBADa;AAAA,OAAd;AADH;AAAA;AAAA;AAAA;AAAA,YADF,EAMGT,MAAM,iBACL,QAAC,cAAD;AACE,MAAA,MAAM,EAAEG,gBADV;AAEE,MAAA,MAAM,EAAEH,MAFV;AAGE,MAAA,OAAO,EAAEC;AAHX;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA,kBADF;AAgBD;;GA7BeH,Q;UAEsBJ,a;;;KAFtBI,Q","sourcesContent":["import { SimpleGrid, useDisclosure } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { Card } from './Card';\nimport { ModalViewImage } from './Modal/ViewImage';\n\ninterface Card {\n  title: string;\n  description: string;\n  url: string;\n  ts: number;\n  id: string;\n}\n\ninterface CardsProps {\n  cards: Card[];\n}\n\nexport function CardList({ cards }: CardsProps): JSX.Element {\n  // TODO MODAL USEDISCLOSURE\n  const { isOpen, onClose, onOpen } = useDisclosure();\n\n  // TODO SELECTED IMAGE URL STATE\n  const [selectedImageUrl, setSelectedImageUrl] = useState('');\n\n  // TODO FUNCTION HANDLE VIEW IMAGE\n  const handleViewImage = (url: string): void => {\n    setSelectedImageUrl(url);\n    onOpen();\n  };\n\n  return (\n    <>\n      <SimpleGrid columns={3} spacing={40}>\n        {cards.map(card => (\n          <Card key={card.id} data={card} viewImage={handleViewImage} />\n        ))}\n      </SimpleGrid>\n      {isOpen && (\n        <ModalViewImage\n          imgUrl={selectedImageUrl}\n          isOpen={isOpen}\n          onClose={onClose}\n        />\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}