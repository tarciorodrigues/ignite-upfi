{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/pages/index.tsx\";\nimport { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\nexport default function Home() {\n  async function fetchImages({\n    pageParam = null\n  }) {\n    const {\n      data\n    } = await api('/api/images', {\n      params: {\n        after: pageParam\n      }\n    });\n    return data;\n  }\n\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage\n  } = useInfiniteQuery('images', fetchImages, {\n    getNextPageParam: lastPage => (lastPage === null || lastPage === void 0 ? void 0 : lastPage.after) || null\n  });\n  const formattedData = useMemo(() => {\n    const formatted = data === null || data === void 0 ? void 0 : data.pages.flatMap(imageData => {\n      return imageData.data.flat();\n    });\n    return formatted;\n  }, [data]);\n\n  if (isLoading && !isError) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!isLoading && isError) {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      maxW: 1120,\n      px: [10, 15, 20],\n      mx: \"auto\",\n      my: [10, 15, 20],\n      children: [/*#__PURE__*/_jsxDEV(CardList, {\n        cards: formattedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), hasNextPage && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => fetchNextPage(),\n        disabled: isFetchingNextPage,\n        children: isFetchingNextPage ? 'Carregando...' : 'Carregar mais'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/pages/index.tsx"],"names":["Button","Box","useMemo","useInfiniteQuery","Header","CardList","api","Loading","Error","Home","fetchImages","pageParam","data","params","after","isLoading","isError","isFetchingNextPage","fetchNextPage","hasNextPage","getNextPageParam","lastPage","formattedData","formatted","pages","flatMap","imageData","flat"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,GAAjB,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAeA,eAAe,SAASC,IAAT,GAA6B;AAC1C,iBAAeC,WAAf,CAA2B;AAAEC,IAAAA,SAAS,GAAG;AAAd,GAA3B,EAA6E;AAC3E,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMN,GAAG,CAAC,aAAD,EAAgB;AACxCO,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAEH;AADD;AADgC,KAAhB,CAA1B;AAKA,WAAOC,IAAP;AACD;;AAED,QAAM;AACJA,IAAAA,IADI;AAEJG,IAAAA,SAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,kBAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA;AANI,MAOFhB,gBAAgB,CAAC,QAAD,EAAWO,WAAX,EAAwB;AAC1CU,IAAAA,gBAAgB,EAAEC,QAAQ,IAAI,CAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEP,KAAV,KAAmB;AADP,GAAxB,CAPpB;AAWA,QAAMQ,aAAa,GAAGpB,OAAO,CAAC,MAAM;AAClC,UAAMqB,SAAS,GAAGX,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEY,KAAN,CAAYC,OAAZ,CAAoBC,SAAS,IAAI;AACjD,aAAOA,SAAS,CAACd,IAAV,CAAee,IAAf,EAAP;AACD,KAFiB,CAAlB;AAGA,WAAOJ,SAAP;AACD,GAL4B,EAK1B,CAACX,IAAD,CAL0B,CAA7B;;AAOA,MAAIG,SAAS,IAAI,CAACC,OAAlB,EAA2B;AACzB,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAI,CAACD,SAAD,IAAcC,OAAlB,EAA2B;AACzB,wBAAO,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,GAAD;AAAK,MAAA,IAAI,EAAE,IAAX;AAAiB,MAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAArB;AAAmC,MAAA,EAAE,EAAC,MAAtC;AAA6C,MAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAjD;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEM;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,EAGGH,WAAW,iBACV,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAMD,aAAa,EAApC;AAAwC,QAAA,QAAQ,EAAED,kBAAlD;AAAA,kBACGA,kBAAkB,GAAG,eAAH,GAAqB;AAD1C;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAeD","sourcesContent":["import { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\n\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\n\ninterface Image {\n  title: string;\n  description: string;\n  url: string;\n  ts: number;\n  id: string;\n}\n\ninterface GetImagesResponse {\n  after: string;\n  data: Image[];\n}\n\nexport default function Home(): JSX.Element {\n  async function fetchImages({ pageParam = null }): Promise<GetImagesResponse> {\n    const { data } = await api('/api/images', {\n      params: {\n        after: pageParam,\n      },\n    });\n    return data;\n  }\n\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery('images', fetchImages, {\n    getNextPageParam: lastPage => lastPage?.after || null,\n  });\n\n  const formattedData = useMemo(() => {\n    const formatted = data?.pages.flatMap(imageData => {\n      return imageData.data.flat();\n    });\n    return formatted;\n  }, [data]);\n\n  if (isLoading && !isError) {\n    return <Loading />;\n  }\n\n  if (!isLoading && isError) {\n    return <Error />;\n  }\n\n  return (\n    <>\n      <Header />\n\n      <Box maxW={1120} px={[10, 15, 20]} mx=\"auto\" my={[10, 15, 20]}>\n        <CardList cards={formattedData} />\n\n        {hasNextPage && (\n          <Button onClick={() => fetchNextPage()} disabled={isFetchingNextPage}>\n            {isFetchingNextPage ? 'Carregando...' : 'Carregar mais'}\n          </Button>\n        )}\n      </Box>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}