{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/pages/index.tsx\";\nimport { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\nexport default function Home() {\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage\n  } = useInfiniteQuery('images', async ({\n    pageParam = null\n  }) => {\n    const options = pageParam !== null ? {\n      params: {\n        after: pageParam\n      }\n    } : {};\n    const response = await api.get(`/api/images`, options);\n    return response.data;\n  }, {\n    getNextPageParam: (lastPage, pages) => // eslint-disable-next-line no-extra-boolean-cast\n    !!lastPage.after ? lastPage.after : null\n  } // TODO GET AND RETURN NEXT PAGE PARAM\n  );\n  const formattedData = useMemo(() => {\n    return data === null || data === void 0 ? void 0 : data.pages.map(el => el.data).flat(1);\n  }, [data]); // TODO RENDER LOADING SCREEN\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  } // TODO RENDER ERROR SCREEN\n\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      maxW: 1120,\n      px: 20,\n      mx: \"auto\",\n      my: 20,\n      children: [/*#__PURE__*/_jsxDEV(CardList, {\n        cards: formattedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), hasNextPage && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => fetchNextPage(),\n        children: isFetchingNextPage ? 'Carregando...' : 'Carregar mais'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/Users/tarciorodrigues/Documents/workspace/rocketseat/ignite/ReactJS/ignite-aulas/reactjs/ignite-upfi/src/pages/index.tsx"],"names":["Button","Box","useMemo","useInfiniteQuery","Header","CardList","api","Loading","Error","Home","data","isLoading","isError","isFetchingNextPage","fetchNextPage","hasNextPage","pageParam","options","params","after","response","get","getNextPageParam","lastPage","pages","formattedData","map","el","flat"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,GAAjB,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAeA,eAAe,SAASC,IAAT,GAA6B;AAC1C,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,kBAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA;AANI,MAOFZ,gBAAgB,CAClB,QADkB,EAElB,OAAO;AAAEa,IAAAA,SAAS,GAAG;AAAd,GAAP,KAAgC;AAC9B,UAAMC,OAAO,GACXD,SAAS,KAAK,IAAd,GACI;AACEE,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAEH;AADD;AADV,KADJ,GAMI,EAPN;AAQA,UAAMI,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAJ,CAAe,aAAf,EAA6BJ,OAA7B,CAAvB;AACA,WAAOG,QAAQ,CAACV,IAAhB;AACD,GAbiB,EAclB;AACEY,IAAAA,gBAAgB,EAAE,CAACC,QAAD,EAAWC,KAAX,KAChB;AACA,KAAC,CAACD,QAAQ,CAACJ,KAAX,GAAmBI,QAAQ,CAACJ,KAA5B,GAAoC;AAHxC,GAdkB,CAmBlB;AAnBkB,GAPpB;AA6BA,QAAMM,aAAa,GAAGvB,OAAO,CAAC,MAAM;AAClC,WAAOQ,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEc,KAAN,CAAYE,GAAZ,CAAgBC,EAAE,IAAIA,EAAE,CAACjB,IAAzB,EAA+BkB,IAA/B,CAAoC,CAApC,CAAP;AACD,GAF4B,EAE1B,CAAClB,IAAD,CAF0B,CAA7B,CA9B0C,CAkC1C;;AACA,MAAIC,SAAJ,EAAe;AACb,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GArCyC,CAuC1C;;;AACA,MAAIC,OAAJ,EAAa;AACX,wBAAO,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,GAAD;AAAK,MAAA,IAAI,EAAE,IAAX;AAAiB,MAAA,EAAE,EAAE,EAArB;AAAyB,MAAA,EAAE,EAAC,MAA5B;AAAmC,MAAA,EAAE,EAAE,EAAvC;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEa;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,EAEGV,WAAW,iBACV,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAMD,aAAa,EAApC;AAAA,kBACGD,kBAAkB,GAAG,eAAH,GAAqB;AAD1C;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAcD","sourcesContent":["import { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\n\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\n\ntype DataPage = {\n  title: string;\n  description: string;\n  url: string;\n  ts: number;\n  id: string;\n};\n\ntype Page = {\n  data: DataPage[];\n  after: string;\n};\n\nexport default function Home(): JSX.Element {\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery(\n    'images',\n    async ({ pageParam = null }) => {\n      const options =\n        pageParam !== null\n          ? {\n              params: {\n                after: pageParam,\n              },\n            }\n          : {};\n      const response = await api.get<Page>(`/api/images`, options);\n      return response.data;\n    },\n    {\n      getNextPageParam: (lastPage, pages) =>\n        // eslint-disable-next-line no-extra-boolean-cast\n        !!lastPage.after ? lastPage.after : null,\n    }\n    // TODO GET AND RETURN NEXT PAGE PARAM\n  );\n\n  const formattedData = useMemo(() => {\n    return data?.pages.map(el => el.data).flat(1);\n  }, [data]);\n\n  // TODO RENDER LOADING SCREEN\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  // TODO RENDER ERROR SCREEN\n  if (isError) {\n    return <Error />;\n  }\n\n  return (\n    <>\n      <Header />\n\n      <Box maxW={1120} px={20} mx=\"auto\" my={20}>\n        <CardList cards={formattedData} />\n        {hasNextPage && (\n          <Button onClick={() => fetchNextPage()}>\n            {isFetchingNextPage ? 'Carregando...' : 'Carregar mais'}\n          </Button>\n        )}\n      </Box>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}